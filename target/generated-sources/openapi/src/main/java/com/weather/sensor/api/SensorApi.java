/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.weather.sensor.api;

import com.weather.sensor.model.AlertResponse;
import com.weather.sensor.model.CO2Statistics;
import com.weather.sensor.model.SensorMeasurement;
import com.weather.sensor.model.SensorStatus;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-26T22:54:49.034886+04:00[Asia/Baku]")
@Validated
@Api(value = "Sensor", description = "Sensor specific data.")
public interface SensorApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/sensors/{uuid}/measurements : Collect sensor measurements
     * Allows for the submission of environmental sensor data, particularly CO2 concentration measurements. Sensors identified by their UUID can post readings, enabling real-time environmental monitoring and data collection for analysis. This endpoint is critical for aggregating sensor data across various locations, facilitating environmental assessments and responsive actions based on CO2 levels. 
     *
     * @param uuid The unique identifier of the sensor from which the measurements originate. This UUID is essential for correctly associating the incoming data with the specific sensor in the system&#39;s database. (required)
     * @param sensorMeasurement  (required)
     * @return Measurement collected successfully. The data has been recorded and will be used for ongoing monitoring and analysis. (status code 200)
     *         or Invalid input provided. The request body did not match the expected format or contained out-of-range values. (status code 400)
     */
    @ApiOperation(
        tags = { "Sensor" },
        value = "Collect sensor measurements",
        nickname = "collectMeasurements",
        notes = "Allows for the submission of environmental sensor data, particularly CO2 concentration measurements. Sensors identified by their UUID can post readings, enabling real-time environmental monitoring and data collection for analysis. This endpoint is critical for aggregating sensor data across various locations, facilitating environmental assessments and responsive actions based on CO2 levels. ",
        authorizations = {
            @Authorization(value = "bearerAuth")
         }
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "Measurement collected successfully. The data has been recorded and will be used for ongoing monitoring and analysis."),
        @ApiResponse(code = 400, message = "Invalid input provided. The request body did not match the expected format or contained out-of-range values.")
    })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/sensors/{uuid}/measurements",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> collectMeasurements(
        @ApiParam(value = "The unique identifier of the sensor from which the measurements originate. This UUID is essential for correctly associating the incoming data with the specific sensor in the system's database.", required = true) @PathVariable("uuid") String uuid,
        @ApiParam(value = "", required = true) @Valid @RequestBody SensorMeasurement sensorMeasurement
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/sensors/{uuid}/metrics : Get sensor metrics
     * Retrieves comprehensive metrics for a specific sensor, identified by its unique UUID. This endpoint is designed to provide valuable statistical insights into environmental data captured by the sensor, such as CO2 levels over the past 30 days. It&#39;s instrumental for monitoring air quality trends and assessing environmental conditions in real-time. 
     *
     * @param uuid The unique identifier of the sensor whose metrics are being requested. (required)
     * @return Sensor metrics retrieved successfully. The response includes statistical data such as maximum and average CO2 levels within the specified period, offering a snapshot of the sensor&#39;s environmental monitoring capabilities. (status code 200)
     *         or Sensor not found. Indicates that no sensor could be located corresponding to the provided UUID, suggesting either an incorrect UUID or that the sensor is not registered within the system. (status code 404)
     */
    @ApiOperation(
        tags = { "Sensor" },
        value = "Get sensor metrics",
        nickname = "getSensorMetrics",
        notes = "Retrieves comprehensive metrics for a specific sensor, identified by its unique UUID. This endpoint is designed to provide valuable statistical insights into environmental data captured by the sensor, such as CO2 levels over the past 30 days. It's instrumental for monitoring air quality trends and assessing environmental conditions in real-time. ",
        response = CO2Statistics.class,
        authorizations = {
            @Authorization(value = "bearerAuth")
         }
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "Sensor metrics retrieved successfully. The response includes statistical data such as maximum and average CO2 levels within the specified period, offering a snapshot of the sensor's environmental monitoring capabilities.", response = CO2Statistics.class),
        @ApiResponse(code = 404, message = "Sensor not found. Indicates that no sensor could be located corresponding to the provided UUID, suggesting either an incorrect UUID or that the sensor is not registered within the system.")
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/sensors/{uuid}/metrics",
        produces = { "application/json" }
    )
    default ResponseEntity<CO2Statistics> getSensorMetrics(
        @ApiParam(value = "The unique identifier of the sensor whose metrics are being requested.", required = true) @PathVariable("uuid") String uuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"maxLast30Days\" : 0, \"avgLast30Days\" : 6.027456183070403 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/sensors/{uuid} : Get sensor status
     * Retrieves the current operational status of a specified sensor, identified by its unique UUID. This endpoint is pivotal for monitoring sensor health, enabling immediate response to any identified issues. It categorizes sensor status into three distinct levels: OK, WARN, and ALERT, each indicating varying degrees of operational normalcy and urgency. 
     *
     * @param uuid The unique identifier (UUID) of the sensor whose status is being queried. (required)
     * @return Successfully retrieves the current status of the sensor, indicating its operational condition as one of three predefined states.  (status code 200)
     *         or The request failed because the sensor with the specified UUID could not be found. This could be due to an incorrect UUID or the sensor not being registered in the system.  (status code 404)
     */
    @ApiOperation(
        tags = { "Sensor" },
        value = "Get sensor status",
        nickname = "getSensorStatus",
        notes = "Retrieves the current operational status of a specified sensor, identified by its unique UUID. This endpoint is pivotal for monitoring sensor health, enabling immediate response to any identified issues. It categorizes sensor status into three distinct levels: OK, WARN, and ALERT, each indicating varying degrees of operational normalcy and urgency. ",
        response = SensorStatus.class,
        authorizations = {
            @Authorization(value = "bearerAuth")
         }
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "Successfully retrieves the current status of the sensor, indicating its operational condition as one of three predefined states. ", response = SensorStatus.class),
        @ApiResponse(code = 404, message = "The request failed because the sensor with the specified UUID could not be found. This could be due to an incorrect UUID or the sensor not being registered in the system. ")
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/sensors/{uuid}",
        produces = { "application/json" }
    )
    default ResponseEntity<SensorStatus> getSensorStatus(
        @ApiParam(value = "The unique identifier (UUID) of the sensor whose status is being queried.", required = true) @PathVariable("uuid") String uuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/sensors/{uuid}/alerts : List all alerts for a specific sensor
     * Retrieves a list of alerts generated by the specified sensor. This endpoint is  crucial for monitoring sensor health and activity by providing a detailed view of  all alerts associated with a sensor&#39;s unique identifier (UUID). It facilitates  timely responses to potential issues and supports maintenance and diagnostic processes. 
     *
     * @param uuid The unique identifier of the sensor for which alerts are being listed. (required)
     * @return A list of alerts associated with the sensor was successfully retrieved. (status code 200)
     *         or No sensor found matching the provided UUID. (status code 404)
     */
    @ApiOperation(
        tags = { "Sensor" },
        value = "List all alerts for a specific sensor",
        nickname = "listSensorAlerts",
        notes = "Retrieves a list of alerts generated by the specified sensor. This endpoint is  crucial for monitoring sensor health and activity by providing a detailed view of  all alerts associated with a sensor's unique identifier (UUID). It facilitates  timely responses to potential issues and supports maintenance and diagnostic processes. ",
        response = AlertResponse.class,
        responseContainer = "List",
        authorizations = {
            @Authorization(value = "bearerAuth")
         }
    )
    @ApiResponses({
        @ApiResponse(code = 200, message = "A list of alerts associated with the sensor was successfully retrieved.", response = AlertResponse.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No sensor found matching the provided UUID.")
    })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/sensors/{uuid}/alerts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<AlertResponse>> listSensorAlerts(
        @ApiParam(value = "The unique identifier of the sensor for which alerts are being listed.", required = true) @PathVariable("uuid") String uuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"startTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endTime\" : \"2000-01-23T04:56:07.000+00:00\", \"measurements\" : [ { \"co2\" : 0, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"co2\" : 0, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ] }, { \"startTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endTime\" : \"2000-01-23T04:56:07.000+00:00\", \"measurements\" : [ { \"co2\" : 0, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"co2\" : 0, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
